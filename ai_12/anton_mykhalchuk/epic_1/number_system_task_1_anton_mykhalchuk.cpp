#include <iostream>   // Підключення бібліотеки для введення та виведення даних
#include <string>     // Підключення бібліотеки для роботи зі строками (не використовується в коді)

using namespace std;

// Функція перевіряє, чи можна представити число `n` в системі числення з основою `base` так,
// щоб всі цифри цього числа були рівні значенню `k`.
bool is_base(int n, int k, int base) {
    int digit;
    
    // Перевіряємо кожну цифру числа в новій системі числення
    while (n > 0) {
        digit = n % base;  // Знаходимо останню цифру числа в системі з основою `base`
        
        if (digit != k){   // Якщо цифра не дорівнює `k`, то це не підходить
            return false;  // Повертаємо false, якщо хоч одна цифра відрізняється від `k`
        }
        
        n /= base;         // Ділимо число на основу, щоб перевірити наступну цифру
    }
    
    return true;  // Якщо всі цифри дорівнюють `k`, повертаємо true
}

// Функція знаходить мінімальну основу системи числення `base`, 
// в якій число `n` складається тільки з цифр, рівних `k`
int find_base(int n, int k) {
    int base;
    
    // Починаємо цикл від основи, рівної `k`, до числа `n`
    for (base = k; base <= n; base++) {
        
        // Якщо число `n` дорівнює `k`, то знаходимо відразу основу
        if (n == k) {
            return n + 1;  // Повертаємо n+1, щоб уникнути некоректного результату
        }
        
        // Використовуємо функцію is_base для перевірки, чи є `n` числом в системі з основою `base`,
        // яке складається тільки з цифр `k`
        if (is_base(n, k, base)) {
            return base;  // Якщо знайшли таку основу, повертаємо її
        }
    }

    return -1;  // Якщо таку основу не знайдено, повертаємо -1
}

int main() {
    int n, k, x;

    // Введення значень `n` і `k` від користувача
    cin >> n >> k;

    // Викликаємо функцію find_base, щоб знайти мінімальну основу
    x = find_base(n, k);

    // Виводимо результат
    cout << x << endl;

    return 0;
}